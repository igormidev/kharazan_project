
  const factory BattlefieldEvent.makeMove(
    final String userId,
    final String moveMaded,
  ) = _OnMoveMaked;

  const factory BattlefieldEvent.changePiecePosition(
    final String userId,
    final String moveMaded,
  ) = _ChangePiecePosition;

  const factory BattlefieldEvent.attackPiece(
    final String userId,
    final String moveMaded,
  ) = _AttackPiece;

  const factory BattlefieldEvent.surrender(String userThatSurrenderID) =
      _Surrender;

  const factory BattlefieldEvent.passTurn(String userTurnID) = _PassTurn;

  const factory BattlefieldEvent.notificateFailure(MatchFailure failure) =
      _NotificateFailure;

  const factory BattlefieldEvent.pieceSelectedInCoordenate(
      PieceEntity piece, Coordenate coordenate) = _BattlefieldPieceSelected;

  const factory BattlefieldEvent.setMatchState() = _SetMatchState;

  const factory BattlefieldEvent.setPieces(List<BoardEntity> pieces) =
      _SetPieces;


      ,,,





    

void _changePiecePosition(
  _ChangePiecePosition event,
  Emitter<BattlefieldState> emit,
) async {
  final String moveMaded = event.moveMaded;
  final moves = CoordenatesInMove.fromString(moveMaded);
  final param = ParamChangePieceCoordenateUsecase(
      entities: state.pieces, coordenatesInMove: moves);
  final animationResponse = await changePieceInCoordenate(param);
  if (animationResponse.isRight()) {
    emit(BattlefieldState.initial(
      users: state.users,
      enitites: animationResponse.asRightResult,
    ));
  }

  // final String userId = event.userId;
  // final response = await _battleController.makeMove(userId, moveMaded);
  // if (response.isLeft()) emit(_getFailureState(response));
}

void _makeAttackMove(
  _AttackPiece event,
  Emitter<BattlefieldState> emit,
) async {
  final String moveMaded = event.moveMaded;
  final moveGoing = CoordenatesInMove.fromString(moveMaded);
  final paramGoing = ParamChangePieceCoordenateUsecase(
      entities: state.pieces, coordenatesInMove: moveGoing);
  final goingAnimationResponse = await changePieceInCoordenate(paramGoing);
  if (goingAnimationResponse.isRight()) {
    emit(BattlefieldState.initial(
      users: state.users,
      enitites: goingAnimationResponse.asRightResult,
    ));
  }
  await Future.delayed(Constants.changeAttackAnimationTime);

  // Invert the move
  final returnGoing = CoordenatesInMove(
    origin: moveGoing.destiny,
    destiny: moveGoing.origin,
  );
  final paramReturn = ParamChangePieceCoordenateUsecase(
      entities: state.pieces, coordenatesInMove: returnGoing);
  final returnAnimationResponse = await changePieceInCoordenate(paramReturn);
  if (returnAnimationResponse.isRight()) {
    emit(BattlefieldState.initial(
      users: state.users,
      enitites: returnAnimationResponse.asRightResult,
    ));
  }
  await Future.delayed(Constants.changeAttackAnimationTime);

  // final String userId = event.userId;
  // final response = await _battleController.makeMove(userId, moveMaded);
  // if (response.isLeft()) emit(_getFailureState(response));
}

void _makeMove(
  _OnMoveMaked event,
  Emitter<BattlefieldState> emit,
) async {
  final String userId = event.userId;
  final String moveMaded = event.moveMaded;

  final response = await _battleController.makeMove(userId, moveMaded);
  if (response.isLeft()) emit(_getFailureState(response));
}

void _surrender(
  _Surrender event,
  Emitter<BattlefieldState> emit,
) {
  // TODO: Implement surrender
  // final String userThatSurrenderID = event.userThatSurrenderID;
}

FutureOr<void> _passTurn(
  _PassTurn event,
  Emitter<BattlefieldState> emit,
) async {
  final String userTurnID = event.userTurnID;
  final response = await _battleController.passUserTurn(userTurnID);
  if (response.isLeft()) {
    emit(_getFailureState(response));
    return;
  }
}

void _notificateFailure(
  _NotificateFailure event,
  Emitter<BattlefieldState> emit,
) {
  final MatchFailure failure = event.failure;
  emit(BattlefieldState.withError(
    failure: failure,
    users: state.users,
    enitites: state.pieces,
  ));
}

void _setPiecesInBoard(
  _SetPieces event,
  Emitter<BattlefieldState> emit,
) {
  emit(BattlefieldState.initial(
    enitites: event.pieces.toPieceAnimation,
    users: state.users,
  ));
}

void _manegePieceSelection(
  _BattlefieldPieceSelected event,
  Emitter<BattlefieldState> emit,
) async {
  final possibleAttacksResponse =
      await _battleController.getPieceValidAttacks(event.coordenate);
  if (possibleAttacksResponse.isLeft()) {
    emit(_getFailureState(possibleAttacksResponse));
    return;
  }

  final possibleMovesResponse =
      await _battleController.getPieceValidMovimentation(event.coordenate);
  if (possibleMovesResponse.isLeft()) {
    emit(_getFailureState(possibleMovesResponse));
    return;
  }

  final possibleMovimentation = possibleMovesResponse.asRightResult;
  final possibleAttacks = possibleAttacksResponse.asRightResult;

  emit(BattlefieldState.pieceSelected(
    possiblePieceAttackArea: possibleAttacks,
    possiblePieceMovementArea: possibleMovimentation,
    enitites: state.pieces,
    users: state.users,
    selectedPieceCoordenate: event.coordenate,
  ));
}

// ==> Auxiliar functions <==

BattlefieldState _getFailureState<T>(
  Either<MatchFailure, T> failure, [
  List<PieceAnimationModel>? pieces,
]) {
  return BattlefieldState.withError(
    failure: failure.asLeftResult,
    users: state.users,
    enitites: pieces ?? state.pieces,
  );
}

==


  const factory BattlefieldEvent.changePiecePositionWithAnimation(
    final String userId,
    final String moveMaded,
  ) = _ChangePiecePositionWithAnimation;

  const factory BattlefieldEvent.changePiecePositionWithoutAnimation(
    final String userId,
    final String moveMaded,
  ) = _ChangePiecePositionWithoutAnimation;

  const factory BattlefieldEvent.attackPieceWithAnimation(
    final String userId,
    final String moveMaded,
  ) = _AttackPieceWithAnimation;

  const factory BattlefieldEvent.attackPieceWithoutAnimation(
    final String userId,
    final String moveMaded,
  ) = _AttackPieceWithoutAnimation;