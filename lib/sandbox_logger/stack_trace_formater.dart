part of 'sand_custom_logs.dart';

String? _castStackTraceToString(
  StackTrace stackTrace, [
  String? colorAnciCode,
]) {
  final lines = stackTrace.toString().split('\n');

  String castedStack = '';
  int cout = 0;

  for (String line in lines) {
    if (_discardDeviceStacktraceLine(line) ||
        _discardWebStacktraceLine(line) ||
        _discardBrowserStacktraceLine(line) ||
        line.isEmpty) {
      continue;
    }
    final cleanText = line
        .replaceFirst(RegExp(r'#\d+\s+'), '')
        .replaceAll(_devicePackageText, '');
    final errorPlace = line.split(' ').last;

    final bool hasTrace = _devicePackageText.hasMatch(errorPlace);

    final castedText = '#$cout $cleanText';
    castedStack += _getTextWithColor(castedText, colorAnciCode);

    if (hasTrace) {
      castedStack += _getTextWithColor(errorPlace, colorAnciCode);
    }

    cout++;
  }

  if (castedStack.isEmpty) {
    return null;
  } else {
    final splitedStack = castedStack.split('\n');
    final isLastEmpty = splitedStack.last.isEmpty;
    if (isLastEmpty) {
      splitedStack.removeLast();
      castedStack = splitedStack.join('\n');
    }
    return castedStack;
  }
}

String _getTextWithColor(
  String castedText,
  String? color, [
  bool haveBreakLine = true,
]) {
  final lastCaracter = haveBreakLine ? '\n' : '';
  if (color == null) {
    return castedText + lastCaracter;
  } else {
    return color + castedText + LogColor.resetColor.anciCode + lastCaracter;
  }
}

// ### ALL CREDITS FOR THE LOGGER PACKAGE POR THIS REGEX CODE

final _devicePackageText =
    RegExp(r'[(][^(?!.*\bfile\b).*\$][a-zA-Z0-9_/:\.-]+[)]'); // colocado o 'r'

/// Matches a stacktrace line as generated on Android/iOS devices.
/// For example:
/// #1      Logger.log (package:logger/src/logger.dart:115:29)
final _deviceStackTraceRegex = RegExp(r'#[0-9]+[\s]+(.+) \(([^\s]+)\)');

/// Matches a stacktrace line as generated by Flutter web.
/// For example:
/// packages/logger/src/printers/pretty_printer.dart 91:37
final _webStackTraceRegex = RegExp(r'^((packages|dart-sdk)\/[^\s]+\/)');

/// Matches a stacktrace line as generated by browser Dart.
/// For example:
/// dart:sdk_internal
/// package:sandbox_logger/src/logger.dart
final _browserStackTraceRegex = RegExp(r'^(?:package:)?(dart:[^\s]+|[^\s]+)');

bool _discardDeviceStacktraceLine(String line) {
  var match = _deviceStackTraceRegex.matchAsPrefix(line);
  if (match == null) {
    return false;
  }
  return match.group(2)!.startsWith('package:logger');
}

bool _discardWebStacktraceLine(String line) {
  var match = _webStackTraceRegex.matchAsPrefix(line);
  if (match == null) {
    return false;
  }
  return match.group(1)!.startsWith('packages/logger') ||
      match.group(1)!.startsWith('dart-sdk/lib');
}

bool _discardBrowserStacktraceLine(String line) {
  var match = _browserStackTraceRegex.matchAsPrefix(line);
  if (match == null) {
    return false;
  }
  return match.group(1)!.startsWith('package:logger') ||
      match.group(1)!.startsWith('dart:');
}
